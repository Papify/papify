/*
 * papify_lib.c
 *
 *  Created on: Apr 29, 2014
 *      Author: aarias
 */

#include "papify.h"

int papify(struct project_s *project){
	FILE *actor_src;
	FILE *actor_cpy;
	int i;
	char actor_cpy_path[500];
	char c;

	for(i = 0; i<project->actors_nb;i++){
		if(project->papify[i] == 1){//if it's scheduled for adding papi code..
			if(DEBUG) printf("Creating a backup of %s\n", project->actors[i]->actor_path);
			if(backup_actors(project->actors[i]->actor_path)==-1){
				printf("WARNING: Looks like the code for %s has already been manipulated.\nThis might lead to errors in the final output.\nDo you still want to continue? [y/n]\n",project->actors[i]->actor_path);
				scanf("%c", &c);
				getchar();
				if(c == 'n'){
					printf("Skipping this actor\n");
					continue;
				}
			}


			if(DEBUG) printf("Attempting to open %s\n", project->actors[i]->actor_path);
			actor_src =fopen(project->actors[i]->actor_path,"r");
			if (!actor_src) {
				printf("ERROR opening source file, aborting this actor\n");
				continue;
			}

			strcpy(actor_cpy_path, project->actors[i]->actor_path);
			strcat(actor_cpy_path, ".papi.c");
			actor_cpy = fopen(actor_cpy_path,"w"); //this is a temporal file that contains the actor code with the papi code added, will later replace the actual actor

			if(DEBUG) printf("Copying initializes in %s\n", project->actors[i]->actor_path);

			papiwrite(actor_src, actor_cpy, project->actors[i]);

/*
			if(DEBUG) printf("Copying includes in %s\n", project->actors[i]->actor_path)
			papiwrite(actor_src, actor_cpy, "#include", l_papi_includes, 0);

			if(DEBUG) printf("Copying arrays in %s\n", actors->actor_path[i]);
			papiwrite(actor_src, actor_cpy, "// State variables of the actor", l_papi_arrays, 1);

			if(DEBUG) printf("Copying extern variables in %s\n", actors->actor_path[i]);
			papiwrite(actor_src, actor_cpy, "// Functions/procedures", l_papi_externs, 1);

			if(DEBUG) printf("Copying variables and initialization in %s\n", actors->actor_path[i]);
			papiwrite(actor_src, actor_cpy, "// Actions", l_papi_variables, 1);
/*
			clone(actor_src, actor_cpy);

			fclose(actor_src);
			actor_src =fopen(actors->actor_path[i],"w");
			fclose(actor_cpy);
			actor_cpy =fopen(actor_cpy_path,"r");

			clone(actor_cpy,actor_src);

			fclose(actor_src);
			fclose(actor_cpy);

			remove(actor_cpy_path);*/
		}
	}
	return 0;
}
/*
int create_file(char *somepath, char* papicode){
	FILE *somefile;

	if((somefile = fopen(somepath,"w"))==NULL) return -1;
	else{
		insert_papicode(somefile, papicode);
		fclose(somefile);
		return 0;
	}
}
*/
int backup_actors(char *actor_path){
	char *backup_path;
	backup_path = malloc(strlen(actor_path)+8);
	strcpy(backup_path,actor_path);
	strcat(backup_path,".backup");
	if( access( backup_path, F_OK ) != -1 ){
		if (DEBUG) printf("Previous backup found, not overwriting..\n"); //should ask if user wants to recover the backup before applying code
		return -1;
	}
	FILE *actor_src;
	FILE *actor_cpy;
	actor_src = fopen(actor_path,"r");
	actor_cpy = fopen(backup_path,"w");
	clone(actor_src, actor_cpy);
	fclose(actor_src);
	fclose(actor_cpy);
	return 0;
}

//will set pointer to the first line after the last keyword
int copy_until(FILE *actor_src, FILE* actor_cpy, char *keyword) {
	char word[150];
	char buf[1500];
	int out=0;
	while (fgets(buf,1500, actor_src)!=NULL){
		fputs(buf,actor_cpy);
		sscanf(buf,"%s%*[^\n]",word);
		if(strcmp(word,keyword)==0)
			do {

				printf("EAEA\n");

				fgets(buf,1500, actor_src);
				fputs(buf,actor_cpy);
				sscanf(buf,"%s%*[^\n]",word);
				out = strcmp(word,keyword);
			} while (!out);
		if(out) break;
	}
	fseek(actor_src, 0-strlen(buf), SEEK_CUR);
	fseek(actor_cpy, 0-strlen(buf), SEEK_CUR);
	return 0;
}

int isblankline(char *line){
	if (strncmp(line,"\n",1)==0)
		return 1;
	else
		return 0;
}

int copy_after(FILE *actor_src, FILE* actor_cpy, char *keyline) {
	char buf[1500];
	do{
		fgets(buf,1500, actor_src);
		fputs(buf,actor_cpy);
	} while(strncmp(buf,keyline,strlen(keyline))!=0);

	do {
		fgets(buf,1500, actor_src);
		fputs(buf,actor_cpy);
	} while(!isblankline(buf));



	fseek(actor_src, 0-strlen(buf), SEEK_CUR);
	fseek(actor_cpy, 0-strlen(buf), SEEK_CUR);
	return 0;
}

void skiplines(FILE* file, char *ref){
	char buf[1500];
	do{
		fgets(buf,1500, file);
	}while(strncmp(buf,ref,strlen(ref))!=0);
}

void papiwrite(FILE *actor_src, FILE* actor_cpy, struct actor_s *actor){
	//Writes initializes:
	if(DEBUG) printf("Generating Initializing code\n");
	int i, k;

	copy_after(actor_src, actor_cpy, "// Initializes");
	fputs("\t//PAPI INITIALIZING CODE\n", actor_cpy);
	fputs("\ti32 local_THREAD_ID;\n", actor_cpy);

	fprintf(actor_cpy, "\n\tsomeActions = malloc(sizeof(papi_action_s)+sizeof(char*) * %d);\n"
						"\tsomeActions->action_nb=%d;\n",
						actor->actions_nb, actor->actions_nb);

	for(i = 0; i < actor->actions_nb; i++){
		fprintf(actor_cpy,"\tsomeActions->action_id[%d] = malloc(strlen(\"%s\")+1);\n"
				"\tsomeActions->action_id[%d] = \"%s\";\n",
				i,actor->actions[i]->action_name,i,actor->actions[i]->action_name);
	}

	fprintf(actor_cpy,"\n\n\tsomeActions->eventCodeSet = malloc(sizeof(papi_eventCodeSet_s)+sizeof(int*)*%d);\n",actor->actions_nb);

	fprintf(actor_cpy,"\n\tsomeActions->eventCodeSet->eventCodeSetSize = malloc(sizeof(int)*someActions->action_nb);\n");

	for(i=0;i<actor->actions_nb;i++){
		fprintf(actor_cpy,"\tsomeActions->eventCodeSet->eventCodeSetSize[%d] = %d;\n"
				"\tsomeActions->eventCodeSet->eventCodeSets[%d] = malloc(sizeof(unsigned long)*someActions->eventCodeSet->eventCodeSetSize[%d]);\n",
				i, actor->actions[i]->events_nb, i, i);

		for(k=0; k < actor->actions[i]->events_nb; k++){
			fprintf(actor_cpy,"\tsomeActions->eventCodeSet->eventCodeSets[%d][%d] = %s;\n",i,k,actor->actions[i]->events[k]);
		}
	}

	fprintf(actor_cpy,"\n\tsomeEventSets = malloc(sizeof(papi_eventSet_s)+sizeof(int*) * %d);\n",actor->actions_nb);
	fprintf(actor_cpy,"\tsomeEventSets->eventSetSize = %d;\n", actor->actions_nb);

	for(i=0;i<actor->actions_nb;i++){
		fprintf(actor_cpy,"\tsomeEventSets->eventSets[%d] = PAPI_NULL;\n",i);
	}

	fprintf(actor_cpy,"\n\tsomeEventSets->values = malloc(sizeof(papi_eventValues_s));\n"
			"\tsomeEventSets->values->eventValuesSize = %d;\n",
			actor->actions_nb);

	for(i=0;i<actor->actions_nb;i++){
		fprintf(actor_cpy,"\tsomeEventSets->values->values[%d] = malloc(sizeof(unsigned long)*%d);\n",i,actor->actions[i]->events_nb);
	}

	fprintf(actor_cpy,"\n\tevent_init();\n"
			"\tlocal_THREAD_ID = THREAD_ID;\n");

	//initializes events
	for(i=0;i<actor->actions_nb;i++){
		fprintf(actor_cpy,"\tevent_create_eventList(&(someEventSets->eventSets[%d]), someActions->eventCodeSet->eventCodeSetSize[%d], someActions->eventCodeSet->eventCodeSets[%d], local_THREAD_ID);\n",i,i,i);
	}

	fputs("\t//END OF PAPI CODE\n", actor_cpy);

	clone(actor_src, actor_cpy);

}



//if mode = 0: "keyword" is the first word of each line to skip, will set pointer right before the first
//line that has a different starting word, after the last consecutive lines with beginning with keyword.
//if mode = 1: "keyword" is a section of RVCCAL, not a word. Will "papiwrite" after first occurrence of said
//section is found in actor_src. Before the occurrence it will just keep copying everything.
/*void papiwrite(FILE *actor_src, FILE* actor_cpy, char *keyword, char *ref, int mode){
	if (mode == 0)
		copy_until(actor_src, actor_cpy, keyword);
	else{
		copy_after(actor_src, actor_cpy, keyword);
	}
	insert_papicode(actor_cpy, ref);
}*/
/*
void insert_papicode(FILE* actor_cpy, char *ref){
	char buf[1500];
	FILE *papiref;
	papiref =fopen("papicode","r");
	skiplines(papiref,ref);
	fgets(buf,1500, papiref);
		while (strncmp(buf,"//endofcode",11)!=0){
			fputs(buf, actor_cpy);
			fgets(buf,1500, papiref);
		}
	fputs("\n", actor_cpy);
	fclose(papiref);
}
*/
void clone(FILE *actor_src, FILE* actor_cpy) {
	char buf[1500];
	while (fgets(buf,1500, actor_src)!=NULL){
		fputs(buf,actor_cpy);
	}
}
/*
void goto_previous_line(FILE *actor_src){
	do{
		fseek(actor_src, -2, SEEK_CUR);
	} while(fgetc(actor_src)!='\n');
}

void free_paths(struct actors_s *actors){
	int i;
	for(i=0;i < actors->num; i++)
		free(actors->actor_path[i]);
	free(actors->src_path);
	free(actors->project_path);
}
*/
void set_paths(struct project_s *project, char *path) {
	project->src_path=malloc(sizeof(char*)*25);//malloc(strlen(path)+strlen("/src/")+2);
	strcpy(project->src_path,path);
	strcat(project->src_path,"/src/");
	project->project_path=malloc(strlen(path)+1);
	strcpy(project->project_path,path);
}



void set_num(struct project_s *project, int num){
	project->actors_nb = num;
}

void set_actor_path(struct project_s *project, int num, char *name){
	int size = strlen(name)+strlen(project->src_path)+strlen(".c")+4;
	project->actors[num]->actor_path = malloc(size);
	strcpy(project->actors[num]->actor_path, project->src_path);
	strcat(project->actors[num]->actor_path, name);
	strcat(project->actors[num]->actor_path, ".c");
	if( access( project->actors[num]->actor_path, F_OK ) == -1 )
		printf("WARNING: File %s.c not found!\n", name);
}

void set_papify_actor(struct project_s *project, int n, int opt){
	project->papify[n] = opt;
}

const int isxcf(const char *filename) {
    char *e = tolower(strrchr (filename, '.'));
    if (strcmp(e,".xcf") == 0)
    	return 1;
    else
    	return 0;
}

char *findMappingFile(char *path) {

    struct dirent *pDirent;
    DIR *pDir;
    int success = 0;
    char * path_to_src = malloc(strlen(path)+strlen("/src"));
    strcpy(path_to_src, path);
    strcat(path_to_src,"/src/");
    pDir = opendir (path_to_src);
    if (pDir == NULL) {
        printf ("Cannot open directory '%s'\n", path_to_src);
        return NULL;
    }
    if(DEBUG) {
    	printf ("Looking for mapping file");
    	fflush(stdout);
    }

    while ((pDirent = readdir(pDir)) != NULL) {
    	//usleep(30000);
    	if(DEBUG) printf (".");
    	if(DEBUG) fflush(stdout);
        if(isxcf(pDirent->d_name)) {
        	success = 1;
        	if(DEBUG) printf (" found! [%s]\n", pDirent->d_name);
        	break;
        }
    }
    closedir (pDir);
    char *result = malloc(strlen(pDirent->d_name)+strlen(path_to_src)+2); //+1 for the zero-terminator CHECK ERRORS MALLOC
    strcpy(result, path_to_src);
    free(path_to_src);
    strcat(result, "/");
    strcat(result, pDirent->d_name);
    if (success) return result;
    else return NULL;
}

int get_actors_num(char *mapping_file_path){
	int j, k, size_of_partitioning, size_of_partition;
	int num = 0;
	node_t *configuration, *partitioning, *partition;
	configuration = roxml_load_doc(mapping_file_path); //a: LIBROXML node http://www.libroxml.net/public-api.html
	if (configuration == NULL) {
		printf("I/O error when reading mapping file.\n");
		exit(1);
	}

	if(DEBUG) printf("Attemping to read %s\n", mapping_file_path);

	partitioning = roxml_get_chld(configuration, NULL, 0); //a: This function returns a given chld of a node etheir by name, or the nth child. (node, child name, number of the child to get)
	size_of_partitioning = roxml_get_chld_nb(partitioning); //a: This function return the number of chlidren for a given node
	for (j = 0; j < size_of_partitioning; j++) {
		partition = roxml_get_chld(partitioning, NULL, j);
		size_of_partition = roxml_get_chld_nb(partition);
		for (k = 0; k < size_of_partition; k++) {
			num++;
		}
	}

	return num;
}

int find_actor(char* name,  struct project_s *project) {
	int i;
	for (i=0;i<project->actors_nb;i++){
		if(strstr(project->actors[i]->actor_path, name)!=NULL)
			return i;
	}
	return -1;
}

void identify_actors(char *mapping_file_path, struct project_s *project) {
	int j, k, n,size_of_config, size_of_partitioning, size_of_partition, size_of_papi, len, actor_num, number_of_actions, number_of_events;
	int num = 0;
	node_t *configuration, *partitioning, *partition, *instance, *papi, *actor_instance, *action, *event;


	//*actors->actor_path = malloc((actors->num) * sizeof (char *)+1);

	configuration = roxml_load_doc(mapping_file_path); //a: LIBROXML node http://www.libroxml.net/public-api.html
	if (configuration == NULL) {
		printf("I/O error when reading mapping file.\n");
		exit(1);
	}
	size_of_config = roxml_get_chld_nb(configuration); //a: This function return the number of children for a given node

	if(DEBUG)printf("Found %d configuration\n", size_of_config);


	partitioning = roxml_get_chld(configuration, NULL, 0); //a: This function returns a given child of a node either by name, or the nth child. (node, child name, number of the child to get)
	size_of_partitioning = roxml_get_chld_nb(partitioning); //a: This function return the number of children for a given node
	if(DEBUG)printf("	Found %d partitionings\n", size_of_partitioning);
	for (j = 0; j < size_of_partitioning; j++) {
		partition = roxml_get_chld(partitioning, NULL, j);
		if(DEBUG)printf("		Found partition, id = '%s'\n", roxml_get_content(roxml_get_attr(partition, "id", 0), NULL, 0, &len));
		size_of_partition = roxml_get_chld_nb(partition);
		for (k = 0; k < size_of_partition; k++) {
			instance = roxml_get_chld(partition, NULL, k);
			if(DEBUG)printf("			Found instance, id = '%s'\n", roxml_get_content(roxml_get_attr(instance, "id", 0), NULL, 0, &len));
			project->actors[num] = malloc(sizeof(actor_s));//!!!
			set_actor_path(project, num++, roxml_get_content(roxml_get_attr(instance, "id", 0), NULL, 0, &len));
		}
	}

	papi = roxml_get_chld(configuration, NULL, 1); //a: This function returns a given child of a node either by name, or the nth child. (node, child name, number of the child to get)
	size_of_papi = roxml_get_chld_nb(papi); //a: This function return the number of children for a given node


	project->papify = malloc(sizeof(int)*project->actors_nb);
	for (j=0;j<project->actors_nb;j++){
		set_papify_actor(project, j, 0);
	}

	for (j = 0; j < size_of_papi; j++) {
		actor_instance = roxml_get_chld(papi, NULL, j);
		if(DEBUG) printf("PAPI actor instance, id = '%s'\n", roxml_get_content(roxml_get_attr(actor_instance, "id", 0), NULL, 0, &len));
		actor_num = find_actor(roxml_get_content(roxml_get_attr(actor_instance, "id", 0), NULL, 0, &len), project);
		if (actor_num != -1){
			set_papify_actor(project, actor_num, 1);

			number_of_actions = roxml_get_chld_nb(actor_instance);
			project->actors[actor_num]->actions_nb = number_of_actions;
			project->actors[actor_num] = realloc(project->actors[actor_num], sizeof(actor_s)+sizeof(action_s*)*number_of_actions);//CHECK FOR REALOC ERRORS

			if(DEBUG) printf("	Found %d actions\n", number_of_actions);
				for (k = 0; k < number_of_actions; k++) {
					action = roxml_get_chld(actor_instance, NULL, k);
					if(DEBUG) printf("		action id = '%s'\n", roxml_get_content(roxml_get_attr(action, "id", 0), NULL, 0, &len));
					number_of_events = roxml_get_chld_nb(action);
					project->actors[actor_num]->actions[k] = malloc(sizeof(action_s)+sizeof(char*)*number_of_events);
					project->actors[actor_num]->actions[k]->events_nb = number_of_events;
					project->actors[actor_num]->actions[k]->action_name = malloc(strlen(roxml_get_content(roxml_get_attr(action, "id", 0), NULL, 0, &len))+1);
					strcpy(project->actors[actor_num]->actions[k]->action_name, roxml_get_content(roxml_get_attr(action, "id", 0), NULL, 0, &len));
					if(DEBUG) printf("			Found %d events\n", number_of_events);
					for (n = 0; n < number_of_events; n++) {
						event = roxml_get_chld(action, NULL, n);
						project->actors[actor_num]->actions[k]->events[n] = malloc(sizeof(strlen(roxml_get_content(roxml_get_attr(event, "id", 0), NULL, 0, &len)))+1);
						strcpy(project->actors[actor_num]->actions[k]->events[n],roxml_get_content(roxml_get_attr(event, "id", 0), NULL, 0, &len));
						if(DEBUG) printf("					event id = '%s'\n", roxml_get_content(roxml_get_attr(event, "id", 0), NULL, 0, &len));
					}
				}
		}
		else
			if (DEBUG) printf("No such actor '%s'\n", roxml_get_content(roxml_get_attr(actor_instance, "id", 0), NULL, 0, &len));

	}


	// release the last allocated buffer even if no pointer is maintained by the user
	roxml_release(RELEASE_LAST);
	// here no memory leak can occur.
	roxml_close(configuration);
}

void structures_test(struct project_s* project){
	int j,k,n;
	char papi[4];
	int max_width, value_to_print;
	max_width = 8;
	value_to_print = 1000;

	printf("/////////////////////////////////////////////\nPrinting all content in project_s structure:\n\n");
	printf("Project path: %s\n", project->project_path);
	printf("Project src path: %s\n", project->src_path);
	printf("Number of actors: %d\n", project->actors_nb);
	printf("\n");
	for(j=0; j<project->actors_nb;j++){
		printf("-Actor:\tActor path: %s\n", project->actors[j]->actor_path);
		(project->papify[j])? strcpy(papi,"yes"):strcpy(papi,"no");
		printf("	PAPI code will be included: %s\n",papi);
		if (project->papify[j]) {
		printf("	Number of actions: %d\n", project->actors[j]->actions_nb);
		printf("\n");
			for(k=0; k<project->actors[j]->actions_nb;k++){
				printf("\tAction: Name: %s\n", project->actors[j]->actions[k]->action_name);
				printf("		Number of events: %d\n", project->actors[j]->actions[k]->events_nb);
				printf("\t\tEvents:\n");
				for(n=0; n<project->actors[j]->actions[k]->events_nb;n++){
					printf("\t\t\t%s\n",project->actors[j]->actions[k]->events[n]);
				}
			}
		}
		printf("\n");
	}
	printf("/////////////////////////////////////////////\n");
}
